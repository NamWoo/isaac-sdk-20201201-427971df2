{
  "modules": [
    "behavior_tree",
    "controller",
    "lqr",
    "message_generators",
    "navigation",
    "planner_cost",
    "trajectory_validation"
  ],
  "graph": {
    "nodes": [
      {
        "name": "subgraph",
        "components": [
          {
            "name": "message_ledger",
            "type": "isaac::alice::MessageLedger"
          },
          {
            "name": "interface",
            "type": "isaac::alice::Subgraph"
          }
        ]
      },
      {
        "name": "lqr",
        "components": [
          {
            "name": "isaac.lqr.DifferentialBaseLqrPlanner",
            "type": "isaac::lqr::DifferentialBaseLqrPlanner"
          },
          {
            "name": "message_ledger",
            "type": "isaac::alice::MessageLedger"
          }
        ]
      },
      {
        "name": "lqr_control_cost",
        "components": [
          {
            "name": "RangeConstraintsCostBuilder",
            "type": "isaac::planner_cost::RangeConstraintsCostBuilder"
          }
        ]
      },
      {
        "name": "lqr_state_cost",
        "components": [
          {
            "name": "TotalSum",
            "type": "isaac::planner_cost::AdditionBuilder"
          },
          {
            "name": "LimitRange",
            "type": "isaac::planner_cost::RangeConstraintsCostBuilder"
          },
          {
            "name": "TargetRange",
            "type": "isaac::planner_cost::RangeConstraintsCostBuilder"
          },
          {
            "name": "SmoothMinimumBuilder",
            "type": "isaac::planner_cost::SmoothMinimumBuilder"
          },
          {
            "name": "CirclesUnionSmoothDistanceBuilder",
            "type": "isaac::planner_cost::CirclesUnionSmoothDistanceBuilder"
          },
          {
            "name": "ObstacleLocalMap",
            "type": "isaac::planner_cost::ObstacleDistanceBuilder"
          },
          {
            "name": "ObstacleRestrictedArea",
            "type": "isaac::planner_cost::ObstacleDistanceBuilder"
          },
          {
            "name": "DistanceQuadraticCostBuilder",
            "type": "isaac::planner_cost::DistanceQuadraticCostBuilder"
          },
          {
            "name": "PolylineDistanceQuadraticCostBuilder",
            "type": "isaac::planner_cost::PolylineDistanceQuadraticCostBuilder"
          }
        ]
      },
      {
        "name": "state_validation_behavior",
        "components": [
          {
            "name": "NodeGroup",
            "type": "isaac::behavior_tree::NodeGroup"
          },
          {
            "name": "RepeatBehavior",
            "type": "isaac::behavior_tree::RepeatBehavior"
          }
        ]
      },
      {
        "name": "state_validation",
        "components": [
          {
            "name": "MessageLedger",
            "type": "isaac::alice::MessageLedger"
          },
          {
            "name": "StateValidation",
            "type": "isaac::trajectory_validation::StateValidation"
          },
          {
            "name": "CollisionCheck",
            "type": "isaac::trajectory_validation::CollisionCheck"
          },
          {
            "name": "SpeedCheck",
            "type": "isaac::trajectory_validation::SpeedCheck"
          }
        ],
        "disable_automatic_start": true
      },
      {
        "name": "trajectory_validation",
        "components": [
          {
            "name": "MessageLedger",
            "type": "isaac::alice::MessageLedger"
          },
          {
            "name": "TrajectoryValidation",
            "type": "isaac::trajectory_validation::TrajectoryValidation"
          },
          {
            "name": "CollisionCheck",
            "type": "isaac::trajectory_validation::CollisionCheck"
          },
          {
            "name": "RangeCheckLinearSpeed",
            "type": "isaac::trajectory_validation::RangeCheck"
          },
          {
            "name": "RangeCheckAngularSpeed",
            "type": "isaac::trajectory_validation::RangeCheck"
          },
          {
            "name": "ApplicabilityCheck",
            "type": "isaac::trajectory_validation::ApplicabilityCheck"
          },
          {
            "name": "FeasibilityCheck",
            "type": "isaac::trajectory_validation::FeasibilityCheck"
          },
          {
            "name": "SpeedCheck",
            "type": "isaac::trajectory_validation::SpeedCheck"
          }
        ]
      },
      {
        "name": "trajectory_selection",
        "components": [
          {
            "name": "MessageLedger",
            "type": "isaac::alice::MessageLedger"
          },
          {
            "name": "TrajectorySelection",
            "type": "isaac::trajectory_validation::TrajectorySelection"
          }
        ]
      },
      {
        "name": "control",
        "components": [
          {
            "name": "isaac.planner.DifferentialBaseControl",
            "type": "isaac::controller::DifferentialBaseControl"
          },
          {
            "name": "message_ledger",
            "type": "isaac::alice::MessageLedger"
          }
        ]
      },
      {
        "name": "stop",
        "components": [
          {
            "name": "message_ledger",
            "type": "isaac::alice::MessageLedger"
          },
          {
            "name": "DifferentialBaseControlGenerator",
            "type": "isaac::message_generators::DifferentialBaseControlGenerator"
          }
        ]
      },
      {
        "name": "navigation_mode",
        "components": [
          {
            "name": "isaac.navigation.GroupSelectorBehavior",
            "type": "isaac::behavior_tree::deprecated::GroupSelectorBehavior"
          },
          {
            "name": "isaac.alice.Behavior",
            "type": "isaac::behavior_tree::deprecated::Behavior"
          }
        ]
      }
    ],
    "edges": [
      {
        "source": "trajectory_selection/TrajectorySelection/trajectory_output",
        "target": "control/isaac.planner.DifferentialBaseControl/plan"
      },
      {
        "source": "control/isaac.planner.DifferentialBaseControl/cmd",
        "target": "state_validation/StateValidation/desired_command"
      },
      {
        "source": "subgraph/interface/state",
        "target": "state_validation/StateValidation/state"
      },
      {
        "source": "subgraph/interface/odometry",
        "target": "state_validation/StateValidation/odometry"
      },
      {
        "source": "state_validation/StateValidation/safe_command",
        "target": "subgraph/interface/command"
      },
      {
        "source": "stop/DifferentialBaseControlGenerator/command",
        "target": "subgraph/interface/command"
      },
      {
        "source": "subgraph/interface/odometry",
        "target": "lqr/isaac.lqr.DifferentialBaseLqrPlanner/odometry"
      },
      {
        "source": "subgraph/interface/plan",
        "target": "lqr/isaac.lqr.DifferentialBaseLqrPlanner/global_plan"
      },
      {
        "source": "subgraph/interface/odometry",
        "target": "trajectory_validation/TrajectoryValidation/odometry"
      },
      {
        "source": "lqr/isaac.lqr.DifferentialBaseLqrPlanner/plan",
        "target": "trajectory_validation/TrajectoryValidation/trajectory"
      },
      {
        "source": "trajectory_validation/TrajectoryValidation/is_valid",
        "target": "trajectory_selection/TrajectorySelection/is_valid_primary"
      },
      {
        "source": "lqr/isaac.lqr.DifferentialBaseLqrPlanner/plan",
        "target": "trajectory_selection/TrajectorySelection/trajectory_primary"
      }
    ]
  },
  "config": {
    "navigation_mode": {
      "isaac.alice.Behavior": {
        "aliases": [
          "lqr",
          "control",
          "stop"
        ],
        "nodes": [
          "$(fullname lqr)",
          "$(fullname control)",
          "$(fullname stop)"
        ]
      },
      "isaac.navigation.GroupSelectorBehavior": {
        "behavior_map": {
          "navigate": [
            "lqr",
            "control"
          ],
          "stop": [
            "stop"
          ]
        },
        "desired_behavior": "navigate",
        "tick_period": "50ms"
      }
    },
    "lqr": {
      "isaac.lqr.DifferentialBaseLqrPlanner": {
        "num_controls": 50,
        "path_cost_name": "$(fullname lqr_state_cost/PolylineDistanceQuadraticCostBuilder)",
        "state_planner_cost_name": "$(fullname lqr_state_cost/TotalSum)",
        "control_planner_cost_name": "$(fullname lqr_control_cost/RangeConstraintsCostBuilder)",
        "tick_period": "10Hz"
      }
    },
    "lqr_control_cost": {
      "RangeConstraintsCostBuilder": {
        "gains": [4.0, 2.0],
        "min_value": [0.0, 0.0],
        "max_value": [0.0, 0.0]
      }
    },
    "lqr_state_cost": {
      "TotalSum": {
        "component_names": [
          "$(fullname lqr_state_cost/DistanceQuadraticCostBuilder)",
          "$(fullname lqr_state_cost/LimitRange)",
          "$(fullname lqr_state_cost/TargetRange)",
          "$(fullname lqr_state_cost/PolylineDistanceQuadraticCostBuilder)"
        ]
      },
      "PolylineDistanceQuadraticCostBuilder": {
        "minimum_distance_waypoint": 0.25,
        "maximum_number_points": 25,
        "gain": 1.0
      },
      "SmoothMinimumBuilder": {
        "component_names": [
          "$(fullname lqr_state_cost/ObstacleLocalMap)",
          "$(fullname lqr_state_cost/ObstacleRestrictedArea)"
        ]
      },
      "CirclesUnionSmoothDistanceBuilder": {
        "component_name": "$(fullname lqr_state_cost/SmoothMinimumBuilder)"
      },
      "DistanceQuadraticCostBuilder": {
        "component_name": "$(fullname lqr_state_cost/CirclesUnionSmoothDistanceBuilder)"
      },
      "ObstacleLocalMap": {
        "obstacle_name": "local_map"
      },
      "ObstacleRestrictedArea": {
        "obstacle_name": "map/restricted_area"
      },
      "LimitRange": {
        "gains": [0.0, 0.0, 0.0, 50.0, 100.0],
        "min_value": [0.0, 0.0, 0.0, 0.0, -0.75],
        "max_value": [0.0, 0.0, 0.0, 0.65, 0.75]
      },
      "TargetRange": {
        "gains": [0.0, 0.0, 0.0, 0.0, 0.0],
        "min_value": [0.0, 0.0, 0.0, 0.0, 0.0],
        "max_value": [0.0, 0.0, 0.0, 0.0, 0.0]
      }
    },
    "state_validation_behavior": {
      "NodeGroup": {
        "node_names": [
          "$(fullname state_validation)"
        ]
      },
      "RepeatBehavior": {
        "wait_duration": 2.0,
        "repeat_after_failure": true
      }
    },
    "state_validation": {
      "CollisionCheck": {
        "deceleration_limit": 10.0,
        "distance_threshold": 0.01,
        "obstacle_names": [
          "map/isaac.navigation.DistanceMap",
          "map/restricted_area",
          "local_map"
        ]
      },
      "SpeedCheck": {
        "valid_speed_region": [
          [0.0, 100.0], [100.0, 0.0], [0.0, -100.0], [-100.0, 0.0]
        ]
      }
    },
    "trajectory_validation": {
      "CollisionCheck": {
        "deceleration_limit": 10.0,
        "distance_threshold": 0.01,
        "obstacle_names": [
          "map/isaac.navigation.DistanceMap",
          "map/restricted_area",
          "local_map"
        ]
      },
      "RangeCheckLinearSpeed": {
        "type": "linear_speed",
        "min": -0.5,
        "max": 1.5
      },
      "RangeCheckAngularSpeed": {
        "type": "angular_speed",
        "min": -1.0,
        "max": 1.0
      },
      "ApplicabilityCheck": {
        "threshold_time": 0.1,
        "threshold_pos_x": 0.2,
        "threshold_pos_y": 0.2,
        "threshold_heading": 0.2,
        "threshold_linear_speed": 1.0,
        "threshold_angular_speed": 1.0,
        "threshold_linear_acceleration": 100.0,
        "threshold_angular_acceleration": 100.0
      },
      "FeasibilityCheck": {
        "limit_pos_x": 0.01,
        "limit_pos_y": 0.01,
        "limit_heading": 0.01,
        "limit_linear_speed": 100.0,
        "limit_angular_speed": 100.0
      },
      "SpeedCheck": {
        "valid_speed_region": [
          [0.0, 100.0], [100.0, 0.0], [0.0, -100.0], [-100.0, 0.0]
        ]
      }
    },
    "trajectory_selection": {
      "TrajectorySelection": {
        "tick_period": "100Hz",
        "try_alternative": false
      }
    },
    "control": {
      "isaac.planner.DifferentialBaseControl": {
        "tick_period": "100Hz",
        "use_tick_time": true
      }
    },
    "stop": {
      "DifferentialBaseControlGenerator": {
        "linear_speed": 0.0,
        "angular_speed": 0.0,
        "tick_period": "100Hz"
      }
    }
  }
}
